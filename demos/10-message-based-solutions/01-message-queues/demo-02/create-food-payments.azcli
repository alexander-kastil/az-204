env=staging
grp=az204-m10-keda-scaling-$env
loc=westeurope
logs=food-app-$env
ai=food-app-$env
acr=configacr$env
img=food-payments
contaienrenv=food-app-env
acct=foodpayment$env
blobcontainer=invoices
queue=food-orders
arm=./food-payments.json
acaname=foodpayments

az group create -n $grp -l $loc

# azure container app environment
az containerapp env create -n $contaienrenv -g $grp --location $loc --no-wait

# create storage queue
az storage account create -n $acct -g $grp --kind StorageV2 --sku Standard_LRS
key=$(az storage account keys list -n $acct --query "[0].value")
az storage container create --account-name $acct --account-key $key --name $blobcontainer
az storage queue create -n $queue --account-key $key --account-name $acct
storageConStr=$(az storage account show-connection-string -n $acct -g $grp \
  --query connectionString -o tsv)

# put a base64 encoded message in the queue -> base 64 encoding is required for the message to be consumed in an Azure Function
messageOne=$(echo "Hello Queue Reader App" | base64)
az storage message put --content $messageOne --queue-name $queue \
 --connection-string $storageConStr

# create container registry 
az acr create -g $grp -n $acr --sku Basic
az acr login -n $acr
az acr update -n $acr --admin-enabled true
acrpwd=$(az acr credential show -n $acr --query passwords[0].value -o tsv) 

# create the function app container  & publish the image to azure container registry
cd food-payments
docker build --rm -f Dockerfile -t $img .
docker tag $img $acr.azurecr.io/$img
docker push $acr.azurecr.io/$img
cd ..

# start container locally and show how it fetches the message
docker run -d --rm -p 5052:80 -e "PaymentConnectionString="$storageConStr -e "Sleep=500" food-payments

# Add another message to the queue and see the logs again
messageTwo=$(echo "Another Hello to Queue Reader App" | base64) 
az storage message put --content $messageTwo --queue-name $queue \
  --connection-string $storageConStr

## Check if an invoice has been created in the blob container
az storage blob list --container-name $blobcontainer --output table --account-name $acct --account-key $key

# Optional - if you want you could also test the container using Azure Container Instances
az container create -g $grp -l $loc -n foodpayment$env --image arambazamba/food-payments --cpu 1 --memory 1 --dns-name-label foodpayment$env --environment-variables \
  PaymentConnectionString=$storageConStr Sleep=500 --no-wait

az container delete -g $grp -n foodpayment$env --yes

# Add a third message to the queue 
messageThree=$(echo "Third Hello to Queue Reader App" | base64)
az storage message put --content $messageThree --queue-name $queue \
  --connection-string $storageConStr      

# Create container app environment and deploy a container to it
az containerapp create -n $acaname -g $grp --environment $contaienrenv \
  --registry-server $acr.azurecr.io \
  --registry-username $acr \
  --registry-password $acrpwd \
  --image $acr.azurecr.io/$img \
  --secrets "storageconstring=$storageConStr" \
  --env-vars Sleep=500 PaymentConnectionString=secretref:storageconstring

az containerapp update -n $acaname -g $grp \
  --scale-rule-name queue-scale-rule \
  --scale-rule-type azure-queue \
  --scale-rule-metadata queueName=food-orders queueLength=10 \
  --scale-rule-auth secretRef=storageconstring triggerParameter=PaymentConnectionString

# Send a bunch of messages to the queue
i=0
while [ $i -ne 1000 ]
do
    i=$(($i+1))
    msg=$(echo "Hello Queue Reader App $i" | base64)
    az storage message put --content $msg --queue-name $queue --connection-string $storageConStr  
done
